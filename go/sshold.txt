package main

import (
	"fmt"
	"strings"
	"time"

	"golang.org/x/crypto/ssh"
)

func InvokeSSH(HostName string, Port string, UserName string, Password string, Commands []string, TimeoutValue int) {
	if Password == "blank" {
		Password = ""
	}
	conn, err := ssh.Dial("tcp", HostName+":"+Port, &ssh.ClientConfig{
		User:    UserName,
		Timeout: 5 * time.Second,
		Auth: []ssh.AuthMethod{
			ssh.Password(Password),
			//ssh.KeyboardInteractive(Challenge),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(),
	})
	if err != nil {
		defer func() {
			if err := recover(); err != nil {
				fmt.Print("Connection Failed check HostName and Credentials")
			}
		}()
	}
	//if it fails try interactive keyboard auth type (show the banner and auto ack'd)
	/*	if err != nil {
		sshClt, err = ssh.Dial("tcp", HostName+":"+Port, &ssh.ClientConfig{
			User: UserName,
			Auth: []ssh.AuthMethod{
				//ssh.Password(pass),
				ssh.KeyboardInteractive(Challenge(Password)),
			},
			HostKeyCallback: ssh.InsecureIgnoreHostKey(),
			BannerCallback:  ssh.BannerDisplayStderr(),
		})
	}*/

	session, err := conn.NewSession()
	handleError(err)
	sshOut, err := session.StdoutPipe()
	handleError(err)
	sshIn, err := session.StdinPipe()

	err = session.Shell()
	handleError(err)
	defer session.Close()
	defer conn.Close()

	// Set up terminal modes
	/*	modes := ssh.TerminalModes{
		ssh.ECHO:          0,     // disable echoing
		ssh.TTY_OP_ISPEED: 14400, // input speed = 14.4kbaud
		ssh.TTY_OP_OSPEED: 14400, // output speed = 14.4kbaud
	}*/
	/*	// Request pseudo terminal
		if err := session.RequestPty("xterm", 40, 80, modes); err != nil {
			pan.Wlog("request for pseudo terminal failed: ", "error.txt", false)
			handleError(err)
		}
		// Start remote shell
		if err := session.Shell(); err != nil {
			pan.Wlog("request for remote shell failed: ", "error.txt", false)
			handleError(err)
		}*/
	//var outputstring string
	for _, CLICommands := range Commands {
		if strings.Contains(CLICommands, "boot system ") {
			write(CLICommands, sshIn, sshOut,TimeoutValue)
			readBuff(sshOut, 5)
			write(" ", sshIn, sshOut,TimeoutValue)
		} else {
			write(CLICommands, sshIn, sshOut,TimeoutValue)
			readBuff(sshOut, TimeoutValue)
			//write(" ", sshIn, sshOut)
			//time.Sleep(5 * time.Millisecond)
			//readBuff(sshOut, TimeoutValue, CLICommands, HostName)
		}
	}
	//readBuff(sshOut, TimeoutValue)
}
