package main

import (
	"fmt"
	"io"
	"os"
	"regexp"
	"time"
)

var prompt = regexp.MustCompile(".*(#|>)")

func handleError(err error) {
	if err != nil {
		fmt.Println(err)
	}
}
func check(s string) bool {
	m := prompt.FindStringSubmatch(s)
	// return true if it is
	return m != nil
}
func write(cmd string, sshIn io.WriteCloser, sshOut io.Reader, TimeoutValue int) {
	_, err := sshIn.Write([]byte(cmd + "\r"))
	handleError(err)
}
func readBuffForString(sshOut io.Reader, buffRead chan string, timeoutSeconds int) {
	buf := make([]byte, 1000)
	waitingString := ""
	for {
		n, err := sshOut.Read(buf) //this reads the ssh terminal
		if err == io.EOF {
			break
		}
		//if err != nil {
		//	fmt.Println(err)
		//	break
		//}
		// for every line
		//fmt.Println(string(buf[:n]))
		current := string(buf[:n])
		if check(current) {
			// ignore prompt and break
			//fmt.Print(current)
			break
		}
		// add current line to result string
		waitingString += current
		if timeoutSeconds == 5 {
			time.Sleep(5 * time.Second)
			os.Exit(3)
			break
		}

	}
	fmt.Println(waitingString)
	buffRead <- waitingString
}
func readBuff(sshOut io.Reader, timeoutSeconds int) string {
	ch := make(chan string)
	go func(sshOut io.Reader) {
		buffRead := make(chan string)
		go readBuffForString(sshOut, buffRead, timeoutSeconds)
		select {
		case ret := <-buffRead:
			ch <- ret
		case <-time.After(time.Duration(timeoutSeconds) * time.Second):
			//pan.Wlog("error.txt", "timeout waiting for command |"+device+" : "+cmd, true)
			break
		}
	}(sshOut)
	return <-ch
}
